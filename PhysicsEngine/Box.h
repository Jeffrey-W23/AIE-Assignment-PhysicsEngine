// #includes, using, etc
#pragma once
#include "Rigidbody.h"

//--------------------------------------------------------------------------------------
// Box object. Inherits from Rigidbody.
//--------------------------------------------------------------------------------------
class Box : public Rigidbody
{
public:

	//--------------------------------------------------------------------------------------
	// Default Constructor.
	//--------------------------------------------------------------------------------------
	Box() = delete;

	//--------------------------------------------------------------------------------------
	// Constructor.
	//
	// Param:
	//		v3Position: a vector3 for box postion.
	//		v3Velocity: a vector3 for box velocity.
	//		fMass: a float value for box mass.
	//		fX: a float value for the box width.
	//		fY: a float value for the box height.
	//		fZ: a float value for the box depth.
	//		v4Color: a vector4 for box color.
	//--------------------------------------------------------------------------------------
	Box(glm::vec3 v3Position, glm::vec3 v3Velocity, float fMass, float fX, float fY, float fZ, glm::vec4 v4Colour);

	//--------------------------------------------------------------------------------------
	// Default Destructor.
	//--------------------------------------------------------------------------------------
	~Box();

	//--------------------------------------------------------------------------------------
	// MakeGizmo: Virtual function to make gizmo.
	//--------------------------------------------------------------------------------------
	virtual void MakeGizmo();

	//--------------------------------------------------------------------------------------
	// GetX: Get the x length of the box.
	//
	// Return:
	//		float: a float value for the length of the box.
	//--------------------------------------------------------------------------------------
	float GetX() { return m_fX; }

	//--------------------------------------------------------------------------------------
	// GetY: Get the y length of the box.
	//
	// Return:
	//		float: a float value for the length of the box.
	//--------------------------------------------------------------------------------------
	float GetY() { return m_fY; }

	//--------------------------------------------------------------------------------------
	// GetZ: Get the z length of the box.
	//
	// Return:
	//		float: a float value for the length of the box.
	//--------------------------------------------------------------------------------------
	float GetZ() { return m_fZ; }

	//--------------------------------------------------------------------------------------
	// GetDimensions: Get the dimensions of the box.
	//
	// Return:
	//		Vector3: a vector3 value for the dimensions of the box.
	//--------------------------------------------------------------------------------------
	glm::vec3 GetDimensions() { return m_v3Dimensions; }

	//--------------------------------------------------------------------------------------
	// GetMin: Get the min of the box.
	//
	// Return:
	//		Vector3: a vector3 value for the min of the box.
	//--------------------------------------------------------------------------------------
	glm::vec3 GetMin() { return glm::vec3(m_v3Position.x - m_fX, m_v3Position.y - m_fY, m_v3Position.z - m_fZ); }

	//--------------------------------------------------------------------------------------
	// GetMax: Get the max of the box.
	//
	// Return:
	//		Vector3: a vector3 value for the max of the box.
	//--------------------------------------------------------------------------------------
	glm::vec3 GetMax() { return glm::vec3(m_v3Position.x + m_fX, m_v3Position.y + m_fY, m_v3Position.z + m_fZ); }

	//--------------------------------------------------------------------------------------
	// GetColour: Get the color of the box.
	//
	// Return:
	//		Vector4: a vector4 value for the color of the box.
	//--------------------------------------------------------------------------------------
	glm::vec4 GetColour() { return m_v4Colour; }

protected:

	//--------------------------------------------------------------------------------------
	// a float for the box x length.
	//--------------------------------------------------------------------------------------
	float m_fX;

	//--------------------------------------------------------------------------------------
	// a float for the box y length.
	//--------------------------------------------------------------------------------------
	float m_fY;

	//--------------------------------------------------------------------------------------
	// a float for the box z length.
	//--------------------------------------------------------------------------------------
	float m_fZ;

	//--------------------------------------------------------------------------------------
	// a vector3 for the box dimensions.
	//--------------------------------------------------------------------------------------
	glm::vec3 m_v3Dimensions;

	//--------------------------------------------------------------------------------------
	// a vector3 for the box min.
	//--------------------------------------------------------------------------------------
	glm::vec3 m_v3Min;

	//--------------------------------------------------------------------------------------
	// a vector3 for the box max.
	//--------------------------------------------------------------------------------------
	glm::vec3 m_v3Max;

	//--------------------------------------------------------------------------------------
	// a vector4 for the box color.
	//--------------------------------------------------------------------------------------
	glm::vec4 m_v4Colour;
};